name: Build and Release Kora Chain

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  # Deterministic build flags
  RUSTFLAGS: "-C target-feature=-crt-static -C link-arg=-Wl,--build-id=none"
  SOURCE_DATE_EPOCH: 1600000000
  CARGO_PROFILE_RELEASE_DEBUG: 0
  CARGO_PROFILE_PRODUCTION_DEBUG: 0
  # Additional reproducible build settings
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@1.87.0
        with:
          targets: wasm32-unknown-unknown
          components: rustfmt, clippy

      - name: Setup additional Rust environment
        run: |
          rustup default 1.87.0
          rustup target add wasm32-unknown-unknown --toolchain nightly
          # Ensure deterministic builds
          rustc --version
          cargo --version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Clean build environment
        run: |
          cargo clean
          # Remove any cached builds that might affect reproducibility
          rm -rf ~/.cargo/registry/cache

      - name: Build node binary
        run: |
          # Set additional environment for reproducible builds
          export CARGO_BUILD_JOBS=1
          cargo build --locked --profile production -p kora-chain-node
          # Verify binary was built
          ls -la target/production/kora-chain-node
          # Strip binary for consistency
          strip target/production/kora-chain-node

      - name: Build runtime WASM
        run: |
          export CARGO_BUILD_JOBS=1
          cargo build --locked --profile production -p kora-chain-runtime --features on-chain-release-build
          # Verify WASM was built
          ls -la target/production/wbuild/kora-chain-runtime/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload node binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/production/kora-chain-node
          asset_name: kora-chain-node-${{ github.ref_name }}
          asset_content_type: application/octet-stream

      - name: Upload runtime WASM to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/production/wbuild/kora-chain-runtime/kora_chain_runtime.compact.compressed.wasm
          asset_name: kora_chain_runtime-${{ github.ref_name }}.compact.compressed.wasm
          asset_content_type: application/wasm

      - name: Generate build checksums
        run: |
          cd target/production
          sha256sum kora-chain-node > kora-chain-node.sha256
          cd wbuild/kora-chain-runtime
          sha256sum kora_chain_runtime.compact.compressed.wasm > kora_chain_runtime.compact.compressed.wasm.sha256

      - name: Upload node binary checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/production/kora-chain-node.sha256
          asset_name: kora-chain-node-${{ github.ref_name }}.sha256
          asset_content_type: text/plain

      - name: Upload runtime WASM checksum to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/production/wbuild/kora-chain-runtime/kora_chain_runtime.compact.compressed.wasm.sha256
          asset_name: kora_chain_runtime-${{ github.ref_name }}.compact.compressed.wasm.sha256
          asset_content_type: text/plain

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            RUSTFLAGS=-C target-feature=-crt-static
            SOURCE_DATE_EPOCH=1600000000

      - name: Generate artifact attestation
        if: steps.build-and-push.outputs.digest != ''
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true